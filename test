The primary aim of this project is to develop a Universal Language Server Pro-
tocol1 (LSP) and Debugger Adapter Protocol2 (DAP) for modular language work-
benches. This endeavor seeks to address significant gaps and challenges developing
LSPs and DAPs in the current landscape of language workbenches, particularly in the
areas of modularization, composition, and interoperability. Current language work-
benches such as Melange [6], MontiCore [11], Spoofax [10], and MPS [21, 22] have
made significant strides in supporting modularization, composition, and IDE integra-
tion. However, their approaches are often fragmented and lack a standardized method
for LSP and DAP generation and modularization. Neverlang [17, 20], developed at the
ADAPT-Lab3 of the Università degli Studi di Milano, being a comprehensive framework
for language composition and modularization that supports the development of lan-
guage product lines [4, 13] (LPLs), is a prime candidate for the implementation of the
proposed LSP and DAP. The project will leverage the existing capabilities of Neverlang
to develop a universal LSP and DAP that can be used across different programming
languages and IDEs. This will enable developers to create external domain-specific
languages [8] (DSLs) and general-purpose languages (GPLs) more effectively and ef-
ficiently, enhancing the overall development experience and productivity. The project
aims to achieve the following objectives:
Aim 1: Improve IDE and LSP Generation
Integrated Development Environment generation and support for the Language Server
Protocol are essential for the practical use of domain-specific languages (DSLs). While
some language workbenches like Xtext [2] support LSP generation [1], many do not,
limiting their usability across different editors and IDEs.
Relevance: By establishing a universal protocol for LSP and DAP, this project aims
to bridge the gap, enabling language workbenches to generate IDE support and LSPs
more seamlessly. This will ensure that languages developed using these workbenches
can be used in any IDE that supports these protocols, enhancing their accessibility and
utility.
Aim 2: Facilitate LSP and DAP Modularization
LSP and DAP modularization are not widely supported by current language workbenches [3].
This feature is crucial for allowing different language components to communicate and
function cohesively within an IDE.
Relevance: Implementing support for LSP and DAP modularization will allow for bet-
ter integration and interaction of various language features, thereby improving the
overall development experience and capability of language workbenches. This aligns
with the needs for more sophisticated and integrated language development tools as
highlighted in the contemporary research and development literature.
Aim 3: Leverage Neverlang for LSP and DAP LPL Development
Neverlang’s capabilities for language composition and modularization [5] make it an
ideal platform for developing a universal LSP and DAP that caters to a variety of lan-
guage needs. By leveraging Neverlang’s LPL development features [7], the project will
establish a reusable core for LSP and DAP functionalities, allowing for the creation of
product line variations tailored to specific programming language requirements. This
will significantly reduce development time and effort for creating LSPs and DAPs for
new languages within the product line.
Relevance: Developing a core reusable base for LSP and DAP functionalities through
Neverlang’s LPL features will streamline the creation of new language support. This
fosters a more efficient and scalable approach to LSP and DAP development, aligning
perfectly with the core principles of software product lines.

The rapid evolution of software development necessitates efficient tools for creating and integrat-
ing programming languages. Integrated Development Environments (IDEs) and source-code editors
(SCEs) offer vital support features like syntax highlighting, code completion, and debugging, but
their development is often complex and labor-intensive. Language Server Protocol (LSP) and
Debugger Adapter Protocol (DAP) were introduced to simplify this process by providing a
standardized API, decoupling language support implementation from specific editors. Despite these
advancements, the integration of LSP and DAP remains challenging due to fragmented and inconsis-
tent approaches. Modern language workbenches have made strides in modularization, composition,
and IDE integration. However, their methods for LSP and DAP generation often lack a standard-
ized and cohesive framework, resulting in increased complexity and reduced efficiency. By leveraging
techniques like feature-oriented programming and software product lines (SPLs), there is potential
to enhance modularity and reusability in language server development. This approach promotes a
bottom-up methodology where LSP and DAP functionalities are encapsulated in feature modules,
enabling a more compositional and efficient implementation process. Nowadays, Xtext [6] is one
of the few language workbenches that support LSP generation [2]. Neverlang, developed at the
ADAPT-Lab of the Universit√† degli Studi di Milano, being a framework for language composition and
modularization, presents a promising solution. By extending its capabilities to support a universal
LSP and DAP, reusable, language-agnostic feature modules can be created. This approach aims to
reduce development effort and complexity compared to traditional top-down methods. Empirical ev-
idence suggests that a modular framework could significantly improve maintainability, extensibility,
and productivity in language support tool development. Additionally, the proposed approach aligns
with contemporary research trends, emphasizing the need for more efficient and integrated language
development tools. By establishing a standardized and modular framework for LSP and DAP gener-
ation, this project aims to enhance the accessibility, usability, and interoperability of domain-specific
languages (DSLs) and general-purpose languages (GPLs) across different editors and IDEs.
